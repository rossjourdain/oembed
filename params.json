{"name":"oembed gem","tagline":"A slim library to work with oEmbed format.","body":"# oembed gem\r\n[![Build Status](http://img.shields.io/travis/soulim/oembed.svg?style=flat)](http://travis-ci.org/soulim/oembed)  [![Code Climate](http://img.shields.io/codeclimate/github/soulim/oembed.svg?style=flat)](https://codeclimate.com/github/soulim/oembed)\r\n\r\n[**oEmbed**](http://oembed.com/) is a format for allowing an embedded representation of a URL on third\r\nparty sites. The simple API allows a website to display embedded content\r\n(such as photos or videos) when a user posts a link to that resource, without\r\nhaving to parse the resource directly.\r\n\r\n**oembed gem** is a simple to use and slim (~150 LOC) library to work with oEmbed format. It has no external dependencies at runtime. All you need to have is Ruby itself.\r\n\r\nThe library shares a behaviour of oEmbed client with any Ruby object. Just `include Oembed::Client` into that object and you are good to go.\r\n\r\n**oembed gem** is provider agnostic. It has no pre-configured providers.\r\nYou can build a client for any oEmbed provider of the world :)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'oembed'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install oembed\r\n\r\n## Usage\r\n\r\nYou have to do a few things to build an oEmbed client with `oembed` gem.\r\n\r\n- `include Oembed::Client` into your object,\r\n- add instance method `#endpoint_uri` to that object. This method has to return\r\n  a string with URI of oEmbed endpoint.\r\n\r\nLets start with a simple example. It will be a client for the awesome\r\n[Speaker Deck](http://speakerdeck.com). Note that we call the service class NameApi - this is to avoid clashing with gems (such as twitter) that may have classes named after the service.\r\n\r\n```ruby\r\nrequire 'oembed'\r\n\r\nclass SpeakerDeckApi\r\n  include Oembed::Client\r\n\r\n  # Read more about endpoint on https://speakerdeck.com/faq#oembed\r\n  def endpoint_uri\r\n    'http://speakerdeck.com/oembed.json'\r\n  end\r\nend\r\n```\r\n\r\nThat's it. Now you can use a method `#fetch` to get data from oEmbed enpoint of Speaker Deck.\r\n\r\n```ruby\r\nclient = SpeakerDeckApi.new\r\nclient.fetch('https://speakerdeck.com/u/soulim/p/rails')\r\n```\r\n\r\nThe method `#fetch` will return a hash with oEmded data.\r\n\r\n```ruby\r\n{\r\n  \"type\" => \"rich\",\r\n  \"version\" => 1.0,\r\n  \"provider_name\" => \"Speaker Deck\",\r\n  \"provider_url\" => \"https://speakerdeck.com/\",\r\n  \"title\" => \"Локализация приложения на базе Rails. Личный опыт и советы\",\r\n  \"author_name\" => \"Alex Soulim\",\r\n  \"author_url\" => \"https://speakerdeck.com/u/soulim\",\r\n  \"html\" => \"<iframe style=\\\"border:0; padding:0; margin:0; background:transparent;\\\" mozallowfullscreen=\\\"true\\\" webkitallowfullscreen=\\\"true\\\" frameBorder=\\\"0\\\" allowTransparency=\\\"true\\\" id=\\\"presentation_frame_4fd3874cebb4b2001f0277e5\\\" src=\\\"//speakerdeck.com/embed/4fd3874cebb4b2001f0277e5\\\" width=\\\"710\\\" height=\\\"596\\\"></iframe>\\n\",\r\n  \"width\" => 710,\r\n  \"height\" => 596\r\n}\r\n```\r\n\r\n`oembed` gem supports JSON and XML response formats. Here is an example of\r\nclient for XML endpoint.\r\n\r\n```ruby\r\nrequire 'oembed'\r\n\r\nclass FlickrApi\r\n  include Oembed::Client\r\n\r\n  def endpoint_uri\r\n    'http://www.flickr.com/services/oembed.xml'\r\n  end\r\nend\r\n\r\nclient = FlickrApi.new\r\nclient.fetch('http://www.flickr.com/photos/alex_soulim/3593916989')\r\n```\r\n\r\nIt will return:\r\n\r\n```ruby\r\n{\r\n  \"type\"=>\"photo\",\r\n  \"title\"=>\"IMG_2072\",\r\n  \"author_name\"=>\"Alex Soulim\", \"author_url\"=>\"http://www.flickr.com/photos/alex_soulim/\",\r\n  \"width\"=>\"683\",\r\n  \"height\"=>\"1024\",\r\n  \"url\"=>\"http://farm4.staticflickr.com/3618/3593916989_3d8aa991ea_b.jpg\",\r\n  \"web_page\"=>\"http://www.flickr.com/photos/alex_soulim/3593916989/\",\r\n  \"thumbnail_url\"=>\"http://farm4.staticflickr.com/3618/3593916989_3d8aa991ea_s.jpg\",\r\n  \"thumbnail_width\"=>\"75\",\r\n  \"thumbnail_height\"=>\"75\",\r\n  \"web_page_short_url\"=>\"http://flic.kr/p/6tzLj2\",\r\n  \"license\"=>\"All Rights Reserved\",\r\n  \"license_id\"=>\"0\",\r\n  \"version\"=>\"1.0\",\r\n  \"cache_age\"=>\"3600\",\r\n  \"provider_name\"=>\"Flickr\",\r\n  \"provider_url\"=>\"http://www.flickr.com/\"\r\n}\r\n```\r\n\r\nYou can make requests with additional parameters. Let's build a client for\r\nInstagram and use `:maxwidth` parameter.\r\n\r\n```ruby\r\nrequire 'oembed'\r\n\r\nclass InstagramApi\r\n  include Oembed::Client\r\n\r\n  def endpoint_uri\r\n    'http://api.instagram.com/oembed'\r\n  end\r\nend\r\n\r\nclient = InstagramApi.new\r\nclient.fetch('http://instagr.am/p/BUG/', maxwidth: 300)\r\n```\r\n\r\nIf you need to always customise the fetch with additional parameters this can be done by providing a fetch method in the service class. In this example we are adding a maxwidth parameter to the request.\r\n\r\n```ruby\r\nrequire 'oembed'\r\n\r\nclass YoutubeApi\r\n  include Oembed::Client\r\n\r\n  def endpoint_uri\r\n    'https://www.youtube.com/oembed'\r\n  end\r\n\r\n  def fetch(url, options={})\r\n    super url, options.merge(maxwidth: 620)\r\n  end\r\nend\r\n\r\nclient = YoutubeApi.new\r\nclient.fetch('https://www.youtube.com/watch?v=_DRNgL76OLc')\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Supported Ruby versions\r\n\r\nThis library is tested against the following Ruby implementations:\r\n\r\n- MRI Ruby 2.1\r\n- MRI Ruby 2.0\r\n- MRI Ruby 1.9.3\r\n- JRuby\r\n","google":"UA-391915-18","note":"Don't delete this file! It's used internally to help with page regeneration."}